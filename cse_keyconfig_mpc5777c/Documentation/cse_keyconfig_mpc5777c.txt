=============================================================================
List of generated methods in project: cse_keyconfig_mpc5777c

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_ConfigOutputMux -This function configures the output muxing and gate
   - pin_mux_PINS_DRV_ConfigInputMux -This function configures the input muxing and gate
   - pin_mux_PINS_DRV_ConfigDigitalFilterLength -This function configures the digital filter length specifies the number system 
                clocks
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearOverrunIntFlag -This function clears the entire overrun interrupt status flag
   - pin_mux_PINS_DRV_GetOverrunIntFlag -This function reads the entire overrun interrupt status flag
   - pin_mux_PINS_DRV_GetFilterInputValue -This function gets the entire filter input values of IRQ and NMI pins
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.

Module "cse1"      (component cse)
   - cse1_CSE_DRV_Init -Initializes the internal state of the driver and enables the CSE interrupt.
   - cse1_CSE_DRV_Deinit -Clears the internal state of the driver and disables the CSE interrupt.
   - cse1_CSE_DRV_InstallCallback -Installs a user callback for the command complete event.
   - cse1_CSE_DRV_EncryptECB -Performs the AES-128 encryption in ECB mode.
   - cse1_CSE_DRV_DecryptECB -Performs the AES-128 decryption in ECB mode.
   - cse1_CSE_DRV_EncryptCBC -Performs the AES-128 encryption in CBC mode.
   - cse1_CSE_DRV_DecryptCBC -Performs the AES-128 decryption in CBC mode.
   - cse1_CSE_DRV_GenerateMAC -Calculates the MAC of a given message using CMAC with AES-128.
   - cse1_CSE_DRV_VerifyMAC -Verifies the MAC of a given message using CMAC with AES-128.
   - cse1_CSE_DRV_EncryptECBAsync -Asynchronously performs the AES-128 encryption in ECB mode.
   - cse1_CSE_DRV_DecryptECBAsync -Asynchronously performs the AES-128 decryption in ECB mode.
   - cse1_CSE_DRV_EncryptCBCAsync -Asynchronously performs the AES-128 encryption in CBC mode.
   - cse1_CSE_DRV_DecryptCBCAsync -Asynchronously performs the AES-128 decryption in CBC mode.
   - cse1_CSE_DRV_GenerateMACAsync -Asynchronously calculates the MAC of a given message using CMAC with AES-128.
   - cse1_CSE_DRV_VerifyMACAsync -Asynchronously verifies the MAC of a given message using CMAC with AES-128.
   - cse1_CSE_DRV_LoadKey -Updates an internal key per the SHE specification.
   - cse1_CSE_DRV_LoadPlainKey -Updates the RAM key memory slot with a 128-bit plaintext.
   - cse1_CSE_DRV_ExportRAMKey -Exports the RAM_KEY into a format compatible with the messages used for LOAD_KEY.
   - cse1_CSE_DRV_InitRNG -Initializes the seed for the PRNG.
   - cse1_CSE_DRV_ExtendSeed -Extends the seed of the PRNG.
   - cse1_CSE_DRV_GenerateRND -Generates a vector of 128 random bits.
   - cse1_CSE_DRV_GetID -Returns the identity (UID) and the value of the status register protected by a MAC over a challenge 
                and the data.
   - cse1_CSE_DRV_GenerateTRND -Generates a vector of 128 random bits using TRNG.
   - cse1_CSE_DRV_SecureBoot -Executes the SHE secure boot protocol.
   - cse1_CSE_DRV_BootFailure -Signals a failure detected during later stages of the boot process.
   - cse1_CSE_DRV_BootOK -Marks a successful boot verification during later stages of the boot process.
   - cse1_CSE_DRV_DbgChal -Obtains a random number which the user shall use along with the MASTER_ECU_KEY and UID to return an 
                authorization request.
   - cse1_CSE_DRV_DbgAuth -Erases all user keys and enables internal debugging if the authorization is confirmed by CSE.
   - cse1_CSE_DRV_MPCompress -Compresses the given messages using the Miyaguchi-Preneel compression algorithm implemented in 
                software.
   - cse1_CSE_DRV_GetAsyncCmdStatus -Checks the status of the execution of an asynchronous command.
   - cse1_CSE_DRV_CancelCommand -Cancels a previously initiated command.

Module "Cpu"       (component MPC5777C_416)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
