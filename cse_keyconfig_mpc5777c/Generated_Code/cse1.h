/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : cse1.h
**     Project     : cse_keyconfig_mpc5777c
**     Processor   : MPC5777C_416
**     Component   : cse
**     Version     : Component SDK_S32_PA_11, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_S32_PA_11
**     Compiler    : GNU C Compiler
**     Date/Time   : 2023-01-24, 17:26, # CodeGen: 0
**     Contents    :
**         CSE_DRV_Init              - status_t CSE_DRV_Init(cse_state_t * state);
**         CSE_DRV_Deinit            - status_t CSE_DRV_Deinit(void);
**         CSE_DRV_InstallCallback   - security_callback_t CSE_DRV_InstallCallback(security_callback_t...
**         CSE_DRV_EncryptECB        - status_t CSE_DRV_EncryptECB(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_DecryptECB        - status_t CSE_DRV_DecryptECB(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_EncryptCBC        - status_t CSE_DRV_EncryptCBC(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_DecryptCBC        - status_t CSE_DRV_DecryptCBC(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_GenerateMAC       - status_t CSE_DRV_GenerateMAC(cse_key_id_t keyId,const uint8_t * msg,uint64_t...
**         CSE_DRV_VerifyMAC         - status_t CSE_DRV_VerifyMAC(cse_key_id_t keyId,const uint8_t * msg,uint64_t...
**         CSE_DRV_EncryptECBAsync   - status_t CSE_DRV_EncryptECBAsync(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_DecryptECBAsync   - status_t CSE_DRV_DecryptECBAsync(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_EncryptCBCAsync   - status_t CSE_DRV_EncryptCBCAsync(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_DecryptCBCAsync   - status_t CSE_DRV_DecryptCBCAsync(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_GenerateMACAsync  - status_t CSE_DRV_GenerateMACAsync(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_VerifyMACAsync    - status_t CSE_DRV_VerifyMACAsync(cse_key_id_t keyId,const uint8_t *...
**         CSE_DRV_LoadKey           - status_t CSE_DRV_LoadKey(cse_key_id_t keyId,const uint8_t * m1,const uint8_t...
**         CSE_DRV_LoadPlainKey      - status_t CSE_DRV_LoadPlainKey(const uint8_t * plainKey,uint32_t timeout);
**         CSE_DRV_ExportRAMKey      - status_t CSE_DRV_ExportRAMKey(uint8_t * m1,uint8_t * m2,uint8_t * m3,uint8_t...
**         CSE_DRV_InitRNG           - status_t CSE_DRV_InitRNG(uint32_t timeout);
**         CSE_DRV_ExtendSeed        - status_t CSE_DRV_ExtendSeed(const uint8_t * entropy,uint32_t timeout);
**         CSE_DRV_GenerateRND       - status_t CSE_DRV_GenerateRND(uint8_t * rnd,uint32_t timeout);
**         CSE_DRV_GetID             - status_t CSE_DRV_GetID(const uint8_t * challenge,uint8_t * uid,uint8_t *...
**         CSE_DRV_GenerateTRND      - status_t CSE_DRV_GenerateTRND(uint8_t * trnd,uint32_t timeout);
**         CSE_DRV_SecureBoot        - status_t CSE_DRV_SecureBoot(uint32_t bootImageSize,const uint8_t *...
**         CSE_DRV_BootFailure       - status_t CSE_DRV_BootFailure(uint32_t timeout);
**         CSE_DRV_BootOK            - status_t CSE_DRV_BootOK(uint32_t timeout);
**         CSE_DRV_DbgChal           - status_t CSE_DRV_DbgChal(uint8_t * challenge,uint32_t timeout);
**         CSE_DRV_DbgAuth           - status_t CSE_DRV_DbgAuth(const uint8_t * authorization,uint32_t timeout);
**         CSE_DRV_MPCompress        - status_t CSE_DRV_MPCompress(const uint8_t * msg,uint64_t msgLen,uint8_t *...
**         CSE_DRV_GetAsyncCmdStatus - status_t CSE_DRV_GetAsyncCmdStatus(void);
**         CSE_DRV_CancelCommand     - status_t CSE_DRV_CancelCommand(void);
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc. 
**     Copyright 2016-2017 NXP 
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file cse1.h
** @version 01.00
*/         
/*!
**  @addtogroup cse1_module cse1 module documentation
**  @{
*/         
#ifndef cse1_H
#define cse1_H
/* MODULE cse1. */

/* Include inherited beans */
#include "Cpu.h"

/*! @brief Driver state structure which holds driver runtime data */
extern cse_state_t cse1_State;

#endif
/* ifndef cse1_H */

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
